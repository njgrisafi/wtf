'''
wtf.core.util

Miscellaneous utilities.
'''
from hashlib import sha256
from uuid import uuid4


def salt_and_hash(plaintext, salt=None):
    '''Salt and hash a plaintext value.'''
    if salt is None:
        salt = sha256(uuid4().bytes).hexdigest()
    return salt + sha256(str.encode(salt + str(plaintext))).hexdigest()


def salt_and_hash_compare(plaintext, value):
    '''Compare a plaintext value with a value generated by salt_and_hash().'''
    return salt_and_hash(plaintext, value[:64]) == value


def interval_intersect(interval_1, interval_2):
    '''Find the value at which two intervals intersect.

    The two intervals passed to this function are assumed to be dictionaries
        with `center` and `radius` values:

        intersect = interval_intersect(
            {'center': 42, 'radius': 23},
            {'center': 23, 'radius': 42}
        )
    '''
    interval_1_min = interval_1.get('center', 0) - interval_1.get('radius', 0)
    interval_1_diameter = interval_1.get('radius', 0) * 2
    interval_2_min = interval_2.get('center', 0) - interval_2.get('radius', 0)
    interval_2_diameter = interval_2.get('radius', 0) * 2
    min_diff = interval_2_min - interval_1_min
    diameter_diff = interval_1_diameter - interval_2_diameter
    intersect_x = min_diff / diameter_diff if diameter_diff != 0 else None
    intersect_y = None
    if intersect_x is not None and (0 < intersect_x < 1):
        intersect_y = interval_1_diameter * intersect_x + interval_1_min
    return intersect_y


def interval_grade_value(interval, grade):
    '''Calculate a value on an interval by its grade.

    The interval passed to this function is assumed to be a dictionary with
        `center` and `radius` values:

        value = interval_grade_value({'center': 42', 'radius': 23}, 0.123)

    If the value is negatively correlated with grade, pass `grade=(1 - grade)`
    '''
    center = interval.get('center', 0)
    radius = interval.get('radius', 0)
    return (center - radius) + (2 * radius * grade)
