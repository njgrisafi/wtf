'''
wtf.api.util

Miscellaneous utilities.
'''
from hashlib import sha256
from uuid import uuid4
from flask import request
from werkzeug.exceptions import BadRequest
from wtf.api.errors import ValidationError


def salt_and_hash(plaintext, salt=None):
    '''Salt and hash a plaintext value.'''
    if salt is None:
        salt = sha256(uuid4().bytes).hexdigest()
    return salt + sha256(str.encode(salt + str(plaintext))).hexdigest()


def salt_and_hash_compare(plaintext, value):
    '''Compare a plaintext value with a value generated by salt_and_hash().'''
    # note: the salt is the first 64 characters of the salted and hashed value
    return salt_and_hash(plaintext, value[:64]) == value


def get_json_body():
    '''Get the JSON request body.'''
    body = None
    if request.content_type != 'application/json':
        raise ValidationError('Content-Type header must be: application/json')
    else:
        try:
            body = request.get_json()
        except BadRequest:
            raise ValidationError('Unable to parse JSON request body')
    return body


def interval_intersect(interval_1, interval_2):
    '''Find the value at which two intervals intersect.

    The two intervals passed to this function are assumed to be dictionaries
        with `center` and `radius` values:

        intersect = interval_intersect(
            {'center': 42, 'radius': 23},
            {'center': 23, 'radius': 42}
        )
    '''
    interval_1_min = interval_1['center'] - interval_1['radius']
    interval_1_diameter = interval_1['radius'] * 2
    interval_2_min = interval_2['center'] - interval_2['radius']
    interval_2_diameter = interval_2['radius'] * 2
    min_diff = interval_2_min - interval_1_min
    diameter_diff = interval_1_diameter - interval_2_diameter
    intersect_x = min_diff / diameter_diff if diameter_diff != 0 else None
    intersect_y = None
    if intersect_x is not None and (0 < intersect_x < 1):
        intersect_y = interval_1_diameter * intersect_x + interval_1_min
    return intersect_y


def interval_grade_value(interval, grade, correlation='+'):
    '''Calculate a value on an interval by its grade.

    The interval passed to this function is assumed to be a dictionary with
        `center` and `radius` values:

        value = interval_grade_value({'center': 42', 'radius': 23}, 0.123)

    If the value is negatively correlated with the grade, set correlation='-'.
    '''
    center = interval.get('center')
    radius = interval.get('radius')
    distance = (2 * radius * grade)
    return (
        center - radius + distance if correlation == '+'
        else center + radius - distance if correlation == '-'
        else None
    )
