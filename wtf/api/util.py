'''
wtf.api.util

Miscellaneous utilities.
'''
from hashlib import sha256
from uuid import uuid4
from flask import request
from wtf.api.errors import ValidationError


def salt_and_hash(plaintext, salt=None):
    '''Salt and hash a plaintext value.'''
    if salt is None:
        salt = sha256(uuid4().bytes).hexdigest()
    return salt + sha256(str.encode(salt + str(plaintext))).hexdigest()


def salt_and_hash_compare(plaintext, value):
    '''Compare a plaintext value with a value generated by salt_and_hash().'''
    # note: the salt is the first 64 characters of the salted and hashed value
    return salt_and_hash(plaintext, value[:64]) == value


def validate_request(content_type=None):
    '''Validate an HTTP request.

    Returns a list of validation errors, if any.
    '''
    errors = []
    if content_type and request.content_type != content_type:
        errors.append('Content-Type header must be: %s' % content_type)
    if errors:
        raise ValidationError(errors=errors)


def interval_intersect(interval_1, interval_2):
    '''Find the value at which two intervals intersect.

    The two intervals passed to this function are assumed to be dictionaries
        with `center` and `radius` values:

        intersect = interval_intersect(
            {'center': 42, 'radius': 23},
            {'center': 23, 'radius': 42}
        )
    '''
    interval_1_min = interval_1['center'] - interval_1['radius']
    interval_1_range = interval_1['radius'] * 2
    interval_2_min = interval_2['center'] - interval_2['radius']
    interval_2_range = interval_2['radius'] * 2
    min_diff = interval_2_min - interval_1_min
    range_diff = interval_1_range - interval_2_range
    intersect_x = min_diff / range_diff if range_diff != 0 else None
    intersect_y = None
    if intersect_x is not None and (0 < intersect_x < 1):
        intersect_y = interval_1_range * intersect_x + interval_1_min
    return intersect_y
